{"version":3,"file":"index.umd.js","sources":["../src/subscription.ts","../src/observable.ts","../src/subject.ts","../src/behavior-subject.ts","../src/replay-subject.ts","../src/idle-subject.ts"],"sourcesContent":["import { FullObserver, Observer } from './observer';\n\nexport class Subscription<T> {\n  public closed = false;\n  private cleanup?: () => void;\n\n  constructor(private observer: FullObserver<T>,\n    private subscriber: SubscriberFunction<T>) {\n    observer.start(this);\n    if (!this.closed) {\n      this.cleanup = this.subscriber(observer);\n    }\n  }\n\n  public unsubscribe(): void {\n    if (!this.closed && this.cleanup !== undefined) {\n      this.cleanup();\n    }\n    this.closed = true;\n  }\n}\n\nexport type SubscriberFunction<T> = (observer: FullObserver<T>) => () => void;\n","import { FullObserver, Observer } from './observer';\nimport { SubscriberFunction, Subscription } from './subscription';\n\ntype Observed<T> = T extends Observable<infer U> ? U : T;\n\nexport class Observable<T> {\n  constructor(private subscriber: SubscriberFunction<T>) {}\n\n  /**\n   * Consolidates all the provided observables into one. The returned observable\n   * will start receiving next calls once all the observable have provided at\n   * least one value and will receive next calls on each new events.\n   * Values are provided into an array containing all values.\n   * complete is called once all the provided observables are completed.\n   * error is called on each provided observable error.\n   * example:\n   * ```typescript\n   *   const observable1 = new Subject<number>();\n   *   const observable2 = new Subject<string>();\n   *   Observable.all([observable1, observable2]).subscribe({\n   *     next: values => console.log(values),\n   *     complete: () => console.log('completed'),\n   *   });\n   *   observable1.next(12); // nothing happens\n   *   observable2.next('yolo'); // [12, 'yolo']\n   *   observable2.complete(); // nothing happens\n   *   observable1.next(42); // [42, 'yolo']\n   *   observable1.complete; // 'completed'\n   * ```\n   */\n  static all<T extends Observable<T>[]>(observables: readonly [...T]): Observable<{ [P in keyof T]: Observed<T[P]> }> {\n    const values = Array.from(Array(observables.length));\n    const completionState = Array.from(Array(observables.length)).map(_ => false);\n\n    return new Observable(observer => {\n      function next(): void {\n        if (values.every(v => v !== undefined)) {\n          observer.next !== undefined && observer.next(values as any);\n        }\n      }\n\n      function complete(): void {\n        if (completionState.every(c => c)) {\n          observer.complete !== undefined && observer.complete();\n        }\n      }\n\n      observables.forEach((observable, index) => {\n        observable.subscribe({\n          next: (value: any) => {\n            values[index] = value;\n            next();\n          },\n          complete: () => {\n            completionState[index] = true;\n            complete();\n          },\n          error: observer.error,\n        });\n      });\n\n      return () => {};\n    });\n  }\n\n  static complete<T>(value?: T): Observable<T> {\n    return new Observable((observer: FullObserver<T>) => {\n      if (value !== undefined) {\n        observer.next(value);\n      }\n      observer.complete();\n      return () => {};\n    });\n  }\n\n  /**\n   * Chains observable in order to smoothly apply processing on next values.\n   * Error and complete signals are being forwarded to returned observable.\n   * Errors can be raised to the error parameter of the next function parameter.\n   * example:\n   * ```typescript\n   * const observable = new Observable<number>(observer => {\n   *   observer.next(42);\n   *   return () => {};\n   * });\n   *\n   * let observedValue: string;\n   * Observable.chain(observable, value => value.toString()).subscribe({\n   *   next: value => observedValue = value,\n   * });\n   * ```\n   */\n  static chain<T, U>(observable: Observable<T>,\n    next: (value: T, error: (errValue: any) => void) => U): Observable<U> {\n    return new Observable<U>(observer => {\n      observable.subscribe({\n        next: value => observer.next(next(value, observer.error)),\n        error: observer.error,\n        complete: observer.complete,\n      });\n\n      return () => {};\n    });\n  }\n\n  // Returns itself\n  observable(): Observable<T> {\n    return this;\n  }\n\n  // Converts items to an Observable\n  static of<T>(...items: Array<T>): Observable<T> {\n    return new Observable(observer => {\n      items.forEach(i => observer.next(i));\n      observer.complete();\n\n      return () => {};\n    });\n  }\n\n  // Converts an observable or iterable to an Observable\n  static from<T>(convertee: Observable<T> | Iterable<T>): Observable<T> {\n    if (convertee.hasOwnProperty('observable')) {\n      const observable: Observable<T> = convertee as any;\n      return observable.observable();\n    }\n    const iterable: Iterable<T> = convertee as any;\n    return new Observable(observer => {\n      for (const value of iterable) {\n        observer.next(value);\n      }\n      observer.complete();\n      return () => {};\n    });\n  }\n\n  public subscribe(observer: Observer<T> | ((value: T) => void),\n    error: (errValue: any) => void = () => {},\n    complete: () => void = () => {}): Subscription<T> {\n    if (typeof observer === 'function') {\n      return new Subscription<T>({\n        start: (_subscription: Subscription<T>) => {},\n        next: observer,\n        error,\n        complete,\n      }, this.subscriber);\n    } else {\n      return new Subscription<T>({\n        start: observer.start !== undefined ? observer.start : () => {},\n        next: observer.next !== undefined ? observer.next : () => {},\n        error: observer.error !== undefined ? observer.error : () => {},\n        complete:\n          observer.complete !== undefined ? observer.complete : () => {},\n      }, this.subscriber);\n    }\n  }\n}\n","import { Observable } from './observable';\nimport { FullObserver } from './observer';\nimport { Subscription } from './subscription';\n\nexport class Subject<T> extends Observable<T> {\n  protected observers: Array<FullObserver<T>> = [];\n\n  constructor() {\n    super((observer: FullObserver<T>): () => void => {\n      this.observers.push(observer);\n      return () => {\n        this.observers = this.observers.filter((o) => o !== observer);\n      };\n    });\n  }\n\n  public next(value: T): void {\n    // Broadcast to all observers\n    this.observers.forEach(observer => observer.next(value));\n  }\n\n  public error(errValue: unknown): void {\n    this.observers.forEach(observer => observer.error(errValue));\n  }\n\n  public complete(): void {\n    this.observers.forEach(observer => observer.complete());\n  }\n}\n","import { Observer } from './observer';\nimport { Subscription } from './subscription';\nimport { Subject } from './subject';\n\n/**\n * Always hold one value, which can be recalled at any time with get.\n * Basically a variable with subscription.\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  protected last: T;\n  protected errValue: any = undefined;\n\n  /**\n   * Construct a Subject by providing an intial value which will be immediatly\n   * forwarded to the subscribed Observers.\n   */\n  constructor(private value: T) {\n    super();\n    this.last = value;\n    this.next(value);\n  }\n\n  /**\n   * Create a BehaviorSubject from a Subject.\n   * The call is asynchronous and resolves once the first value is received.\n   * Subsequent values are then forwarded.\n   */\n  static fromSubject<T>(subject: Subject<T>): Promise<BehaviorSubject<T>> {\n    return new Promise(resolve => {\n      let initialized = false;\n      const subscription = subject.subscribe(value => {\n        if (!initialized) {\n          initialized = true;\n          const behaviorSubject = new BehaviorSubject<T>(value);\n          subject.subscribe({\n            next: value => behaviorSubject.next(value),\n            error: error => behaviorSubject.error(error),\n            complete: () => behaviorSubject.complete(),\n          });\n          // We can only unsubscribe asynchonously when we are subscribing.\n          setTimeout(() => {\n            subscription.unsubscribe();\n            resolve(behaviorSubject);\n          }, 0);\n        }\n      });\n    });\n  }\n\n  public error(errValue: unknown): void {\n    this.errValue = errValue;\n    super.error(errValue);\n  }\n\n  public next(value: T): void {\n    this.last = value;\n    super.next(value);\n  }\n\n  /**\n   * Retrieve the last set value\n   */\n  public get(): T {\n    if (this.hasError()) {\n      throw this.errValue;\n    }\n    return this.last;\n  }\n\n  /**\n   * Notifies subscribing observer immediatly.\n   */\n  public subscribe(observer: Observer<T> | ((value: T) => void),\n    error: (errValue: any) => void = () => {},\n    complete: () => void = () => {}): Subscription<T> {\n    const subscription = super.subscribe(observer, error, complete);\n    (subscription as any).observer.next(this.last);\n    return subscription;\n  }\n\n  protected hasError(): boolean {\n    return this.errValue !== undefined;\n  }\n}\n","import { Observable } from './observable';\nimport { FullObserver, Observer } from './observer';\nimport { Subscription } from './subscription';\n\n/**\n * Will replay the previous calls to next, complete and error to a newly\n * subscribe subject.\n */\nexport class ReplaySubject<T> extends Observable<T> {\n  protected observers: FullObserver<T>[] = [];\n  protected memory: T[] = [];\n  protected errValue: any = undefined;\n  protected completed = false;\n\n  // memorySize: number of event saved and replayed on subscription\n  constructor(private memorySize: number) {\n    super((observer: FullObserver<T>): () => void => {\n      this.observers.push(observer);\n      this.memory.forEach((value) => observer.next(value));\n      if (this.hasError()) {\n        observer.error(this.errValue);\n      } else if (this.isComplete()) {\n        observer.complete();\n      }\n      return () => {\n        this.observers = this.observers.filter((o) => o !== observer);\n      };\n    });\n  }\n\n  public next(value: T): void {\n    // Save the value for later replay on subscription\n    this.remember(value);\n    // Broadcast to all observers\n    this.observers.forEach(observer => observer.next(value));\n  }\n\n  public error(errValue: unknown): void {\n    this.errValue = errValue;\n    this.observers.forEach(observer => observer.error(errValue));\n  }\n\n  public complete(): void {\n    this.completed = true;\n    this.observers.forEach(observer => observer.complete());\n  }\n\n  protected hasError(): boolean {\n    return this.errValue !== undefined;\n  }\n\n  protected isComplete(): boolean {\n    return this.completed;\n  }\n\n  protected remember(value: T): void {\n    if (this.memorySize > 0) {\n      if (this.memory.length >= this.memorySize) {\n        const [_head, ...tail] = this.memory;\n        this.memory = tail;\n      }\n      this.memory.push(value);\n    }\n  }\n}\n","import { ReplaySubject } from './replay-subject';\n\n/**\n * This Subject does not broadcast the value immediatly but only when the\n * browser is idle using the requestIdleCallback facility.\n * Observers should not expect to receive all updates but only the last one\n * received before the browser became idle.\n */\nexport class IdleSubject<T> extends ReplaySubject<T> {\n  protected idleHandle = 0;\n\n  /**\n   * window: the brower's window object or equivalent\n   * timeout: optional parameter provided to requestIdCallback\n   */\n  constructor(private window: Window, private timeout?: number) {\n    super(0);\n  }\n\n  public next(value: T): void {\n    if (this.idleHandle !== 0) {\n      (this.window as any).cancelIdleCallback(this.idleHandle);\n    }\n    this.idleHandle = (this.window as any).requestIdleCallback(() => {\n      // Broadcast to all observers\n      this.observers.forEach((observer) => observer.next(value), {\n        timeout: this.timeout,\n      });\n    });\n    // Save the value for later replay on subscription\n    this.remember(value);\n  }\n}\n"],"names":[],"mappings":"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"}